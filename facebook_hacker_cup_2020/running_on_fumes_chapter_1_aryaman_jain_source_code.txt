#include<bits/stdc++.h>
#define lld long long
#define pb push_back
#define mk make_pair
#define MAX (lld)1e18+7
#define lim (lld)1e15+7
#define MAX2 (lld)1e6+9
#define ff first
#define ss second
#define fastio ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;

const lld mod=lim;

lld power(lld x, lld y, lld p)  
{   lld res = 1;     x = x % p; if (x == 0) return 0;  
  
    while (y > 0)  
    { if (y & 1) res = (res*x) % p;  y = y>>1; x = (x*x) % p;   }  
    return res;  } 


lld extend_gcd(lld a, lld b, lld& x, lld& y) {
    if (b == 0) { x = 1;y = 0;return a;}
    lld x1, y1;
    lld d = extend_gcd(b, a % b, x1, y1);
    x = y1; y = x1 - y1 * (a / b);return d;	}

lld rowNum[]={-1,0,0,1};
lld colNum[]={0,-1,1,0};
std::vector<pair<lld,lld>> t(4*MAX2);
std::vector<lld> v(MAX2+1);
pair<lld,lld> combine(pair<lld,lld>a,pair<lld,lld>b)
{
	pair<lld,lld>c;

	if(a.ff<b.ff)
		c=a;

	else if(a.ff>b.ff)
		c=b;

	else
	{
		c.ff=a.ff;
		c.ss=max(a.ss,b.ss);
	}

	return c;
}

void build(lld pos,lld tl,lld tr)
{
	if(tl==tr)
	{
		t[pos].ff = v[tl];
		t[pos].ss = tl;
	}

	else
	{
		lld tm=(tl+tr)/2;
		build(2*pos,tl,tm);
		build(2*pos+1,tm+1,tr);
		t[pos] = combine(t[2*pos],t[2*pos+1]);
	}
}

pair<lld,lld> query(lld pos,lld tl,lld tr,lld l,lld r)
{
	if(l>r)
		return {lim,0};
	else if(tl==l && tr==r)
	{
		return t[pos];
	}

	else
	{
		lld tm=(tl+tr)/2;

		return combine(query(2*pos,tl,tm,l,min(r,tm))
			,query(2*pos+1,tm+1,tr,max(l,tm+1),r ));
	}
}

void update(lld x,lld tl,lld tr,lld pos,lld val)
{
	if(tl==tr)
		t[x].ff = val;

	else
	{
		lld tm=(tl+tr)/2;
		if(pos<=tm)
			update(2*x,tl,tm,pos,val);
		else
			update(2*x+1,tm+1,tr,pos,val);

		t[x] = combine(t[2*x],t[2*x+1]);
	}
}

void print(lld cas,lld ar)
{
	cout<<"Case #"<<cas<<": "<<ar<<endl;
}

int main()
{
	#ifndef ONLINE_JUDGE
    // for getting input from input.txt
    freopen("input.txt", "r", stdin);
    // for writing output to output.txt
    freopen("output.txt", "w", stdout);
	#endif

	fastio
	lld t1;
	cin>>t1;
	for(lld cas=1;cas<=t1;cas++)
	{
		lld n,m;
		cin>>n>>m;

		
		for(lld i=1;i<=n;i++)
		{	
			cin>>v[i];
			if(v[i]==0 || i==n)
				v[i]=lim;
		}

		lld fuel_left = m,cost=0,flag=0;

		build(1,1,n);
		for(lld i=1;i<=n;i++)
		{
			if(fuel_left<0)
			{
				pair<lld , lld> ans;
				ans = query(1,1,n,i-m,i-1);

				if(ans.ff>=lim)
				{
					print(cas,-1);
					flag=1;
					break;
				}

				lld val = v[i]+ans.ff;
				update(1,1,n,i,val);
				cost = ans.ff;
				fuel_left = m-(i-ans.ss);
			}

			else
			{
				update(1,1,n,i,v[i]+cost);
			}

			fuel_left--;
		}

		if(!flag)
		print(cas,cost);

		for(lld i=1;i<=n;i++)
			v[i]=0;

		for(lld i=1;i<=4*n;i++)
			t[i].ff=t[i].ss=0;
	}
}